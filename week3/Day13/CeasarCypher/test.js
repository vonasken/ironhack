// // console.log( "b".charCodeAt(0) );
// // console.log( "A to Z".charCodeAt(0) );

function caesarCipher (message) {
	
	message.split("")

}
























































// }

// /* Generated by Opal 0.10.3 */
// (function(Opal) {
//   function $rb_plus(lhs, rhs) {
//     return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
//   }
//   function $rb_gt(lhs, rhs) {
//     return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
//   }
//   function $rb_minus(lhs, rhs) {
//     return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
//   }
//   function $rb_lt(lhs, rhs) {
//     return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
//   }
//   var TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $range = Opal.range;

//   Opal.add_stubs(['$split', '$each', '$include?', '$+', '$ord', '$push', '$chr', '$==', '$>', '$-', '$<', '$puts', '$join', '$solve_cipher']);
//   Opal.defn(Opal.Object, '$solve_cipher', TMP_2 = function $$solve_cipher(string, shift) {
//     var $a, $b, TMP_1, self = this, new_array = nil, array = nil;

//     new_array = [];
//     array = string.$split("");
//     ($a = ($b = array).$each, $a.$$p = (TMP_1 = function(letter){var self = TMP_1.$$s || this, $c;
// if (letter == null) letter = nil;
//     if ((($c = ($range(97, 122, false))['$include?']($rb_plus(letter.$ord(), shift))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
//         return new_array.$push(($rb_plus(letter.$ord(), shift)).$chr())
//       } else if (letter.$ord()['$=='](32)) {
//         return new_array.$push(letter)
//       } else if ((($c = $rb_gt(shift, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
//         return new_array.$push(($rb_minus($rb_plus(letter.$ord(), shift), 26)).$chr())
//       } else if ((($c = $rb_lt(shift, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
//         return new_array.$push(($rb_plus($rb_plus(letter.$ord(), shift), 26)).$chr())
//         } else {
//         return nil
//       }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
//     return self.$puts("This is your decyphered message: " + (new_array.$join()));
//   }, TMP_2.$$arity = 2);
//   return self.$solve_cipher("p| uhdo qdph lv grqdog gxfn", -3);
// });
